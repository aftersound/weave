[
    {
        "name": "AND",
        "description": "Evaluates to true if all boolean operands are true.",
        "controls": [
            {
                "name": "operands",
                "type": {
                    "name": "STRING"
                },
                "description": "A list of boolean operands, separated by commas."
            }
        ],
        "examples": [
            {
                "expression": "AND(operand1,operand2,operand3)",
                "description": "Returns true if operand1, operand1, and operand1 are all true."
            }
        ]
    },
    {
        "name": "BOOL:AS",
        "description": "Evaluates the input boolean value and returns the result of `trueFunc` if the input is true, or the result of `falseFunc` if the input is false.",
        "controls": [
            {
                "name": "trueFunc",
                "type": {
                    "name": "STRING"
                },
                "constraint": {
                    "type": "Required"
                },
                "description": "The function or expression to evaluate and return when the input value is true."
            },
            {
                "name": "falseFunc",
                "type": {
                    "name": "STRING"
                },
                "constraint": {
                    "type": "Required"
                },
                "description": "The function or expression to evaluate and return when the input value is false."
            }
        ],
        "input": {
            "type": {
                "name": "BOOLEAN"
            },
            "description": "A boolean value that determines which function (`trueFunc` or `falseFunc`) will be evaluated and returned."
        },
        "output": {
            "type": {
                "name": "Varies"
            },
            "description": "The output value is determined by the evaluation of either `trueFunc` or `falseFunc`. The type of the output depends on the implementation of these functions."
        },
        "examples": [
            {
                "expression": "BOOL:AS(STR(YES), STR(NO))",
                "description": "Returns the string `YES` if the input is true, otherwise returns the string `NO`."
            },
            {
                "expression": "BOOL:AS(INT(1), INT(0))",
                "description": "Returns the integer `1` if the input is true, otherwise returns the integer `0`."
            }
        ]
    },
    {
        "name": "OR",
        "description": "Evaluates multiple operands and returns true if at least one operand evaluates to true. Returns false only if all operands evaluate to false.",
        "controls": [
            {
                "name": "operand",
                "type": {
                    "name": "STRING"
                },
                "constraint": {
                    "type": "Required"
                },
                "description": "Variable control. Each operand is a function directive, which must evaluate to a boolean value."
            }
        ],
        "input": {
            "type": {
                "name": "Varies"
            },
            "description": "The input provided to the operands. The input type depends on the implementation of each operand's function directive."
        },
        "output": {
            "type": {
                "name": "BOOLEAN"
            },
            "description": "Produces a boolean output. Returns `true` if at least one operand evaluates to true, otherwise returns `false`."
        },
        "examples": [
            {
                "expression": "OR(MAP:GET(isInventor), CHAIN(MAP:GET(age), INT:GE(10)))",
                "description": "Evaluates the operands `MAP:GET(isInventor)` and `CHAIN(MAP:GET(age), INT:GE(10))`. Returns true if either operand evaluates to true, otherwise returns false."
            }
        ]
    },
    {
        "name": "NOT",
        "description": "Negates a boolean operand",
        "controls": [
            {
                "name": "operand",
                "type": {
                    "name": "STRING"
                },
                "description": "The boolean operand to negate."
            }
        ],
        "examples": [
            {
                "expression": "NOT(operand)",
                "description": "Returns true if operand is false."
            }
        ]
    },
    {
        "name": "EQ",
        "description": "Checks if two operands are equal.",
        "controls": [
            {
                "name": "operand1",
                "type": {
                    "name": "STRING"
                },
                "description": "The first expression."
            },
            {
                "name": "operand2",
                "type": {
                    "name": "STRING"
                },
                "description": "The second expression."
            }
        ],
        "examples": [
            {
                "expression": "EQUAL(operand1, operand2)",
                "description": "Returns true if operand1 is equal to operand2."
            }
        ]
    },
    {
        "name": "NE",
        "description": "Checks if two expressions are not equal.",
        "controls": [
            {
                "name": "operand1",
                "type": {
                    "name": "STRING"
                },
                "description": "The first expression."
            },
            {
                "name": "operand2",
                "type": {
                    "name": "STRING"
                },
                "description": "The second expression."
            }
        ],
        "examples": [
            {
                "expression": "NOT_EQUAL(operand1, operand2)",
                "description": "Returns true if operand1 is not equal to operand2."
            }
        ]
    },
    {
        "name": "TO_BOOLEAN_LIST",
        "description": "Converts a collection of elements to Boolean values.",
        "controls": [
            {
                "name": "sourceType",
                "type": {
                    "name": "STRING"
                },
                "description": "The data type of the source elements."
            },
            {
                "name": "valueTrue",
                "type": {
                    "name": "varies"
                },
                "description": "The value to map to true."
            },
            {
                "name": "valueFalse",
                "type": {
                    "name": "varies"
                },
                "description": "The value to map to false."
            }
        ],
        "examples": [
            {
                "expression": "TO_BOOLEAN_LIST(String, trueValue, falseValue)",
                "description": "Creates a Boolean list by mapping elements to true or false."
            }
        ]
    },
    {
        "name": "TO_BOOLEAN_SET",
        "description": "Converts a collection of elements to a Boolean set.",
        "controls": [
            {
                "name": "sourceType",
                "type": {
                    "name": "STRING"
                },
                "description": "The data type of the source elements."
            },
            {
                "name": "valueTrue",
                "type": {
                    "name": "varies"
                },
                "description": "The value to map to true."
            },
            {
                "name": "valueFalse",
                "type": {
                    "name": "varies"
                },
                "description": "The value to map to false."
            }
        ],
        "examples": [
            {
                "expression": "TO_BOOLEAN_SET(String, trueValue, falseValue)",
                "description": "Creates a Boolean set by mapping elements to true or false."
            }
        ]
    }
]