{
    "actor.bindings.config.list": [
        {
            "group": "COMPONENT_FACTORY",
            "baseType": "io.aftersound.weave.component.ComponentFactory",
            "types": []
        },
        {
            "group": "VALUE_FUNC_FACTORY",
            "baseType": "io.aftersound.weave.common.ValueFuncFactory",
            "types": [
                "io.aftersound.weave.service.request.ParamValueFuncFactory",
                "io.aftersound.weave.value.CommonValueFuncFactory"
            ]
        },
        {
            "group": "AUTH_HANDLER",
            "baseType": "io.aftersound.weave.service.security.AuthHandler",
            "types": [
                "io.aftersound.weave.sample.extension.service.security.DemoAuthHandler"
            ]
        },
        {
            "group": "RATE_LIMIT_EVALUATOR",
            "baseType": "io.aftersound.weave.service.rl.RateLimitEvaluator",
            "types": [
                "io.aftersound.weave.sample.extension.service.rl.DemoRateLimitEvaluator"
            ]
        },
        {
            "group": "ADMIN_SERVICE_EXECUTOR",
            "baseType": "io.aftersound.weave.service.ServiceExecutor",
            "types": []
        },
        {
            "group": "SERVICE_EXECUTOR",
            "baseType": "io.aftersound.weave.service.ServiceExecutor",
            "types": [
                "io.aftersound.weave.sample.extension.service.GreetingServiceExecutor"
            ]
        }
    ],
    "component.config.list": [],
    "admin.service.metadata.list": [],
    "service.metadata.list": [
        {
            "methods": [
                "GET"
            ],
            "path": "/greet/{name}",
            "paramFields": [
                {
                    "name": "p1",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                },
                {
                    "name": "name",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                }
            ],
            "executionControl": {
                "type": "GreetingService",
                "greetingWords": [
                    "Hello",
                    "Hola",
                    "您好"
                ]
            }
        },
        {
            "methods": [
                "GET"
            ],
            "path": "/greet1/{name}",
            "paramFields": [
                {
                    "name": "p1",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                },
                {
                    "name": "name",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                }
            ],
            "authControl": {
                "type": "Demo",
                "userCredentials": {
                    "user": "W6ph5Mm5Pz8GgiULbPgzG37mj9g="
                }
            },
            "executionControl": {
                "type": "GreetingService",
                "greetingWords": [
                    "Hello",
                    "Hola",
                    "您好"
                ]
            }
        },
        {
            "methods": [
                "GET"
            ],
            "path": "/greet2/{name}",
            "paramFields": [
                {
                    "name": "p1",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                },
                {
                    "name": "name",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                }
            ],
            "rateLimitControl": {
                "type": "Demo"
            },
            "executionControl": {
                "type": "GreetingService",
                "greetingWords": [
                    "Hello",
                    "Hola",
                    "您好"
                ]
            }
        },
        {
            "methods": [
                "GET"
            ],
            "path": "/greet3/{name}",
            "paramFields": [
                {
                    "name": "p1",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                },
                {
                    "name": "name",
                    "type": "String",
                    "multiValued": false,
                    "paramType": "Path",
                    "constraint": {
                        "type": "Required"
                    }
                }
            ],
            "authControl": {
                "type": "Demo",
                "userCredentials": {
                    "user": "W6ph5Mm5Pz8GgiULbPgzG37mj9g="
                }
            },
            "rateLimitControl": {
                "type": "Demo"
            },
            "executionControl": {
                "type": "GreetingService",
                "greetingWords": [
                    "Hello",
                    "Hola",
                    "您好"
                ]
            }
        }
    ]
}