{
    "openapi": "3.1.0",
    "info": {
        "title": "Demonstrate extensions related to Kafka",
        "description": "Demonstrate extensions related to Kafka",
        "contact": {
            "email": "aftersound@gmail.com"
        },
        "version": "1.0.0"
    },
    "tags": [
        {
            "name": "kafka-producer"
        },
        {
            "name": "kafka-consumer"
        }
    ],
    "paths": {
        "/kafka/user": {
            "post": {
                "tags": [
                    "kafka-producer"
                ],
                "summary": "Convert request payload as a single Kafka message and send to Kafka via Kafka producer",
                "description": "In this example, service request payload contains a single user information",
                "requestBody": {
                    "description": "user information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "extensions": {
                        "x-weave-param-field": {
                            "name": "user",
                            "type": "String",
                            "valueFunc": "IS:READ_STRING()"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "data successfully produced into Kafka",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Acknowledge"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Messages"
                                }
                            }
                        }
                    }
                },
                "extensions": {
                    "x-weave-execution-control": {
                        "inputs": [
                            "user"
                        ],
                        "config": {
                            "pipeline": "CHAIN(transform,sink)",
                            "transform": {
                                "type": "FUNC",
                                "input": "user",
                                "func": "LIST:AS_LIST()",
                                "output": "users"
                            },
                            "sink": {
                                "type": "Kafka1X:SINK",
                                "producer": "kafka1x.producer",
                                "topic": "user",
                                "recordKeyFunc": "NULL()",
                                "recordValueFunc": "CHAIN(JACKSON:CONVERT(JSON,JsonNode),JACKSON:CONVERT(Object,ByteArray))",
                                "input": "users",
                                "output": "results"
                            }
                        },
                        "outputs": [
                            "results"
                        ],
                        "type": "ProcessService"
                    }
                }
            }
        },
        "/kafka/users": {
            "get": {
                "tags": [
                    "kafka-consumer"
                ],
                "summary": "Consume messages from kafka and convert the messages in according to execution control",
                "description": "In this example, every message contains a single user information",
                "responses": {
                    "200": {
                        "description": "data successfully consumed from Kafka",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }

                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Messages"
                                }
                            }
                        }
                    }
                },
                "extensions": {
                    "x-weave-execution-control": {
                        "config": {
                            "pipeline": "CHAIN(source)",
                            "source": {
                                "type": "Kafka1X:SOURCE",
                                "consumer": "kafka1x.consumer",
                                "recordParseFunc": "Kafka1X:CRM(BASE64:ewogICAgIm5hbWUiOiAidXNlciIsCiAgICAiZmllbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidG9waWMiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQodG9waWMpIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJwYXJ0aXRpb24iLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQocGFydGl0aW9uKSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAib2Zmc2V0IiwKICAgICAgICAgICAgInZhbHVlRnVuYyI6ICJLYWZrYTFYOkNSOkZJRUxEKG9mZnNldCkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcFR5cGUiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQodGltZXN0YW1wVHlwZSkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcCIsCiAgICAgICAgICAgICJ2YWx1ZUZ1bmMiOiAiS2Fma2ExWDpDUjpGSUVMRCh0aW1lc3RhbXApIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJrZXkiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkNIQUlOKEthZmthMVg6Q1I6RklFTEQoa2V5KSxTVFI6REVDT0RFKCksSU5UOkZST00oU3RyaW5nKSkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInZhbHVlIiwKICAgICAgICAgICAgInZhbHVlRnVuYyI6ICJDSEFJTihLYWZrYTFYOkNSOkZJRUxEKHZhbHVlKSxKQUNLU09OOkNPTlZFUlQoQnl0ZUFycmF5LGphdmEudXRpbC5NYXApKSIKICAgICAgICB9CiAgICBdCn0K)",
                                "enableSyncCommit": "true",
                                "output": "users"
                            }
                        },
                        "outputs": [
                            "users"
                        ],
                        "type": "ProcessService"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Acknowledge": {
                "type": "object"
            },
            "User": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    }
                },
                "required": [
                    "firstName",
                    "lastName"
                ]
            },
            "Message": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "severity": {
                        "type": "string",
                        "enum": [
                            "Error",
                            "Warning"
                        ]
                    },
                    "category": {
                        "type": "string",
                        "enum": [
                            "System",
                            "Application",
                            "Service",
                            "Request"
                        ]
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "severity",
                    "category",
                    "message"
                ]
            },
            "Messages": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    }
                }
            }
        }
    },
    "extensions": {
        "x-weave-extensions": [
            {
                "group": "COMPONENT_FACTORY",
                "baseType": "io.aftersound.weave.component.ComponentFactory",
                "types": [
                    "io.aftersound.weave.kafka1x.ConsumerFactory",
                    "io.aftersound.weave.kafka1x.ProducerFactory",
                    "io.aftersound.weave.mvel2.TemplateEvaluatorFactory",
                    "io.aftersound.weave.process.ProcessorFactoryRegistryFactory"
                ]
            },
            {
                "group": "VALUE_FUNC_FACTORY",
                "baseType": "io.aftersound.weave.common.ValueFuncFactory",
                "types": [
                    "io.aftersound.weave.jackson.BsonValueFuncFactory",
                    "io.aftersound.weave.jackson.JacksonValueFuncFactory",
                    "io.aftersound.weave.jackson.SmileValueFuncFactory",
                    "io.aftersound.weave.kafka1x.KafkaValueFuncFactory",
                    "io.aftersound.weave.service.request.ParamValueFuncFactory",
                    "io.aftersound.weave.slf4j.Slf4jValueFuncFactory",
                    "io.aftersound.weave.value.CommonValueFuncFactory"
                ]
            },
            {
                "group": "ADMIN_SERVICE_EXECUTOR",
                "baseType": "io.aftersound.weave.service.ServiceExecutor",
                "types": []
            },
            {
                "group": "SERVICE_EXECUTOR",
                "baseType": "io.aftersound.weave.service.ServiceExecutor",
                "types": [
                    "io.aftersound.weave.process.ProcessServiceExecutor"
                ]
            }
        ],
        "x-weave-components": [
            {
                "type": "ProcessorFactoryRegistry",
                "id": "processor.factory.registry",
                "extensionTypes": [
                    "io.aftersound.weave.process.FlatMapperFactory",
                    "io.aftersound.weave.process.FunctionFactory",
                    "io.aftersound.weave.kafka1x.AssignFactory",
                    "io.aftersound.weave.kafka1x.SourceFactory",
                    "io.aftersound.weave.kafka1x.SinkFactory"
                ]
            },
            {
                "type": "TemplateEvaluator",
                "id": "TemplateEvaluator",
                "options": {}
            },
            {
                "type": "Kafka1X:Consumer",
                "id": "kafka1x.consumer",
                "options": {
                    "bootstrap.servers": "192.168.1.80:9092",
                    "group.id": "user.consumer",
                    "topic.partitions": "user#0-2",
                    "auto.offset.reset": "earliest",
                    "isolation.level": "read_committed"
                }
            },
            {
                "type": "Kafka1X:Producer",
                "id": "kafka1x.producer",
                "options": {
                    "bootstrap.servers": "192.168.1.80:9092"
                }
            }
        ]
    }
}