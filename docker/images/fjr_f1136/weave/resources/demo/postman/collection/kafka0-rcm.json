{
	"info": {
		"_postman_id": "fa7f409e-6b4c-4bbb-b807-e86278f6df2b",
		"name": "kafka0: runtime config management  (use Environment mp0@8080)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3066161"
	},
	"item": [
		{
			"name": "CREATE Application",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"namespace\": \"demo\",\n    \"name\": \"kafka0\",\n    \"owner\": \"aftersound\",\n    \"ownerEmail\": \"aftersound@gmail.com\",\n    \"description\": \"Demonstrate Kafka extensions and declarative services on top of these extensions\",\n    \"attributes\": {}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/service/application",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"application"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Application",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}/service/demo/application/kafka0",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"demo",
						"application",
						"kafka0"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE Application",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"namespace\": \"demo\",\n    \"name\": \"kafka0\",\n    \"owner\": \"aftersound\",\n    \"ownerEmail\": \"aftersound@gmail.com\",\n    \"description\": \"Demonstrate declarative services that consume data from and produce data into Apache Kafka\",\n    \"attributes\": {}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/service/application",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"application"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Namespace",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{HOST}}/management/namespace/kafka0",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"management",
						"namespace",
						"kafka0"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE OpenAPI Spec",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"Demonstrate extensions related to Kafka\",\n        \"description\": \"Demonstrate extensions related to Kafka\",\n        \"contact\": {\n            \"email\": \"aftersound@gmail.com\"\n        },\n        \"version\": \"1.0.0\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"kafka-producer\"\n        },\n        {\n            \"name\": \"kafka-consumer\"\n        }\n    ],\n    \"paths\": {\n        \"/kafka/user\": {\n            \"post\": {\n                \"tags\": [\n                    \"kafka-producer\"\n                ],\n                \"summary\": \"Convert request payload as a single Kafka message and send to Kafka via Kafka producer\",\n                \"description\": \"In this example, service request payload contains a single user information\",\n                \"requestBody\": {\n                    \"description\": \"user information\",\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\"\n                            }\n                        }\n                    },\n                    \"extensions\": {\n                        \"x-weave-param-field\": {\n                            \"name\": \"user\",\n                            \"type\": \"String\",\n                            \"valueFunc\": \"IS:READ_STRING()\"\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"data successfully produced into Kafka\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Acknowledge\"\n                                }\n                            }\n                        }\n                    },\n                    \"500\": {\n                        \"description\": \"internal error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Messages\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"extensions\": {\n                    \"x-weave-execution-control\": {\n                        \"inputs\": [\n                            \"user\"\n                        ],\n                        \"config\": {\n                            \"pipeline\": \"CHAIN(transform,sink)\",\n                            \"transform\": {\n                                \"type\": \"FUNC\",\n                                \"input\": \"user\",\n                                \"func\": \"LIST:AS_LIST()\",\n                                \"output\": \"users\"\n                            },\n                            \"sink\": {\n                                \"type\": \"Kafka1X:SINK\",\n                                \"producer\": \"kafka1x.producer\",\n                                \"topic\": \"user\",\n                                \"recordKeyFunc\": \"NULL()\",\n                                \"recordValueFunc\": \"CHAIN(JACKSON:CONVERT(JSON,JsonNode),JACKSON:CONVERT(Object,ByteArray))\",\n                                \"input\": \"users\",\n                                \"output\": \"results\"\n                            }\n                        },\n                        \"outputs\": [\n                            \"results\"\n                        ],\n                        \"type\": \"ProcessService\"\n                    }\n                }\n            }\n        },\n        \"/kafka/users\": {\n            \"get\": {\n                \"tags\": [\n                    \"kafka-consumer\"\n                ],\n                \"summary\": \"Consume messages from kafka and convert the messages in according to execution control\",\n                \"description\": \"In this example, every message contains a single user information\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"data successfully consumed from Kafka\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n\n                                }\n                            }\n                        }\n                    },\n                    \"500\": {\n                        \"description\": \"internal error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Messages\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"extensions\": {\n                    \"x-weave-execution-control\": {\n                        \"config\": {\n                            \"pipeline\": \"CHAIN(source)\",\n                            \"source\": {\n                                \"type\": \"Kafka1X:SOURCE\",\n                                \"consumer\": \"kafka1x.consumer\",\n                                \"recordParseFunc\": \"Kafka1X:CRM(BASE64:ewogICAgIm5hbWUiOiAidXNlciIsCiAgICAiZmllbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidG9waWMiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQodG9waWMpIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJwYXJ0aXRpb24iLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQocGFydGl0aW9uKSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAib2Zmc2V0IiwKICAgICAgICAgICAgInZhbHVlRnVuYyI6ICJLYWZrYTFYOkNSOkZJRUxEKG9mZnNldCkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcFR5cGUiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQodGltZXN0YW1wVHlwZSkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcCIsCiAgICAgICAgICAgICJ2YWx1ZUZ1bmMiOiAiS2Fma2ExWDpDUjpGSUVMRCh0aW1lc3RhbXApIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJrZXkiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkNIQUlOKEthZmthMVg6Q1I6RklFTEQoa2V5KSxTVFI6REVDT0RFKCksSU5UOkZST00oU3RyaW5nKSkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInZhbHVlIiwKICAgICAgICAgICAgInZhbHVlRnVuYyI6ICJDSEFJTihLYWZrYTFYOkNSOkZJRUxEKHZhbHVlKSxKQUNLU09OOkNPTlZFUlQoQnl0ZUFycmF5LGphdmEudXRpbC5NYXApKSIKICAgICAgICB9CiAgICBdCn0K)\",\n                                \"enableSyncCommit\": \"true\",\n                                \"output\": \"users\"\n                            }\n                        },\n                        \"outputs\": [\n                            \"users\"\n                        ],\n                        \"type\": \"ProcessService\"\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Acknowledge\": {\n                \"type\": \"object\"\n            },\n            \"User\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"firstName\",\n                    \"lastName\"\n                ]\n            },\n            \"Message\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    },\n                    \"severity\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"Error\",\n                            \"Warning\"\n                        ]\n                    },\n                    \"category\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"System\",\n                            \"Application\",\n                            \"Service\",\n                            \"Request\"\n                        ]\n                    },\n                    \"message\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"id\",\n                    \"severity\",\n                    \"category\",\n                    \"message\"\n                ]\n            },\n            \"Messages\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"messages\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Message\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"extensions\": {\n        \"x-weave-extensions\": [\n            {\n                \"group\": \"COMPONENT_FACTORY\",\n                \"baseType\": \"io.aftersound.weave.component.ComponentFactory\",\n                \"types\": [\n                    \"io.aftersound.weave.kafka1x.ConsumerFactory\",\n                    \"io.aftersound.weave.kafka1x.ProducerFactory\",\n                    \"io.aftersound.weave.mvel2.TemplateEvaluatorFactory\",\n                    \"io.aftersound.weave.process.ProcessorFactoryRegistryFactory\"\n                ]\n            },\n            {\n                \"group\": \"VALUE_FUNC_FACTORY\",\n                \"baseType\": \"io.aftersound.weave.common.ValueFuncFactory\",\n                \"types\": [\n                    \"io.aftersound.weave.jackson.BsonValueFuncFactory\",\n                    \"io.aftersound.weave.jackson.JacksonValueFuncFactory\",\n                    \"io.aftersound.weave.jackson.SmileValueFuncFactory\",\n                    \"io.aftersound.weave.kafka1x.KafkaValueFuncFactory\",\n                    \"io.aftersound.weave.service.request.ParamValueFuncFactory\",\n                    \"io.aftersound.weave.slf4j.Slf4jValueFuncFactory\",\n                    \"io.aftersound.weave.value.CommonValueFuncFactory\"\n                ]\n            },\n            {\n                \"group\": \"ADMIN_SERVICE_EXECUTOR\",\n                \"baseType\": \"io.aftersound.weave.service.ServiceExecutor\",\n                \"types\": []\n            },\n            {\n                \"group\": \"SERVICE_EXECUTOR\",\n                \"baseType\": \"io.aftersound.weave.service.ServiceExecutor\",\n                \"types\": [\n                    \"io.aftersound.weave.process.ProcessServiceExecutor\"\n                ]\n            }\n        ],\n        \"x-weave-components\": [\n            {\n                \"type\": \"ProcessorFactoryRegistry\",\n                \"id\": \"processor.factory.registry\",\n                \"extensionTypes\": [\n                    \"io.aftersound.weave.process.FlatMapperFactory\",\n                    \"io.aftersound.weave.process.FunctionFactory\",\n                    \"io.aftersound.weave.kafka1x.AssignFactory\",\n                    \"io.aftersound.weave.kafka1x.SourceFactory\",\n                    \"io.aftersound.weave.kafka1x.SinkFactory\"\n                ]\n            },\n            {\n                \"type\": \"TemplateEvaluator\",\n                \"id\": \"TemplateEvaluator\",\n                \"options\": {}\n            },\n            {\n                \"type\": \"Kafka1X:Consumer\",\n                \"id\": \"kafka1x.consumer\",\n                \"options\": {\n                    \"bootstrap.servers\": \"192.168.1.80:9092\",\n                    \"group.id\": \"user.consumer\",\n                    \"topic.partitions\": \"user#0-2\",\n                    \"auto.offset.reset\": \"earliest\",\n                    \"isolation.level\": \"read_committed\"\n                }\n            },\n            {\n                \"type\": \"Kafka1X:Producer\",\n                \"id\": \"kafka1x.producer\",\n                \"options\": {\n                    \"bootstrap.servers\": \"192.168.1.80:9092\"\n                }\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/service/demo/application/kafka0/openapi-spec",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"demo",
						"application",
						"kafka0",
						"openapi-spec"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET OpenAPI Spec",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/service/demo/application/kafka0/openapi-spec",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"demo",
						"application",
						"kafka0",
						"openapi-spec"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE OpenAPI Spec",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"Demonstrate extensions related to Kafka\",\n        \"description\": \"Demonstrate extensions related to Kafka\",\n        \"contact\": {\n            \"email\": \"aftersound@gmail.com\"\n        },\n        \"version\": \"1.0.0\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"kafka-producer\"\n        },\n        {\n            \"name\": \"kafka-consumer\"\n        }\n    ],\n    \"paths\": {\n        \"/kafka/user\": {\n            \"post\": {\n                \"tags\": [\n                    \"kafka-producer\"\n                ],\n                \"summary\": \"Convert request payload as a single Kafka message and send to Kafka via Kafka producer\",\n                \"description\": \"In this example, service request payload contains a single user information\",\n                \"requestBody\": {\n                    \"description\": \"user information\",\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\"\n                            }\n                        }\n                    },\n                    \"extensions\": {\n                        \"x-weave-param-field\": {\n                            \"name\": \"user\",\n                            \"type\": \"String\",\n                            \"valueFunc\": \"IS:READ_STRING()\"\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"data successfully produced into Kafka\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Acknowledge\"\n                                }\n                            }\n                        }\n                    },\n                    \"500\": {\n                        \"description\": \"internal error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Messages\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"extensions\": {\n                    \"x-weave-execution-control\": {\n                        \"inputs\": [\n                            \"user\"\n                        ],\n                        \"config\": {\n                            \"pipeline\": \"CHAIN(transform,sink)\",\n                            \"transform\": {\n                                \"type\": \"FUNC\",\n                                \"input\": \"user\",\n                                \"func\": \"LIST:AS_LIST()\",\n                                \"output\": \"users\"\n                            },\n                            \"sink\": {\n                                \"type\": \"Kafka1X:SINK\",\n                                \"producer\": \"kafka1x.producer\",\n                                \"topic\": \"user\",\n                                \"recordKeyFunc\": \"NULL()\",\n                                \"recordValueFunc\": \"CHAIN(JACKSON:CONVERT(JSON,JsonNode),JACKSON:CONVERT(Object,ByteArray))\",\n                                \"input\": \"users\",\n                                \"output\": \"results\"\n                            }\n                        },\n                        \"outputs\": [\n                            \"results\"\n                        ],\n                        \"type\": \"ProcessService\"\n                    }\n                }\n            }\n        },\n        \"/kafka/users\": {\n            \"get\": {\n                \"tags\": [\n                    \"kafka-consumer\"\n                ],\n                \"summary\": \"Consume messages from kafka and convert the messages in according to execution control\",\n                \"description\": \"In this example, every message contains a single user information\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"data successfully consumed from Kafka\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n\n                                }\n                            }\n                        }\n                    },\n                    \"500\": {\n                        \"description\": \"internal error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Messages\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"extensions\": {\n                    \"x-weave-execution-control\": {\n                        \"config\": {\n                            \"pipeline\": \"CHAIN(source)\",\n                            \"source\": {\n                                \"type\": \"Kafka1X:SOURCE\",\n                                \"consumer\": \"kafka1x.consumer\",\n                                \"recordParseFunc\": \"Kafka1X:CRM(BASE64:ewogICAgIm5hbWUiOiAidXNlciIsCiAgICAiZmllbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidG9waWMiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQodG9waWMpIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJwYXJ0aXRpb24iLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQocGFydGl0aW9uKSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAib2Zmc2V0IiwKICAgICAgICAgICAgInZhbHVlRnVuYyI6ICJLYWZrYTFYOkNSOkZJRUxEKG9mZnNldCkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcFR5cGUiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkthZmthMVg6Q1I6RklFTEQodGltZXN0YW1wVHlwZSkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInRpbWVzdGFtcCIsCiAgICAgICAgICAgICJ2YWx1ZUZ1bmMiOiAiS2Fma2ExWDpDUjpGSUVMRCh0aW1lc3RhbXApIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJrZXkiLAogICAgICAgICAgICAidmFsdWVGdW5jIjogIkNIQUlOKEthZmthMVg6Q1I6RklFTEQoa2V5KSxTVFI6REVDT0RFKCksSU5UOkZST00oU3RyaW5nKSkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInZhbHVlIiwKICAgICAgICAgICAgInZhbHVlRnVuYyI6ICJDSEFJTihLYWZrYTFYOkNSOkZJRUxEKHZhbHVlKSxKQUNLU09OOkNPTlZFUlQoQnl0ZUFycmF5LGphdmEudXRpbC5NYXApKSIKICAgICAgICB9CiAgICBdCn0K)\",\n                                \"enableSyncCommit\": \"true\",\n                                \"output\": \"users\"\n                            }\n                        },\n                        \"outputs\": [\n                            \"users\"\n                        ],\n                        \"type\": \"ProcessService\"\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Acknowledge\": {\n                \"type\": \"object\"\n            },\n            \"User\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"firstName\",\n                    \"lastName\"\n                ]\n            },\n            \"Message\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    },\n                    \"severity\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"Error\",\n                            \"Warning\"\n                        ]\n                    },\n                    \"category\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"System\",\n                            \"Application\",\n                            \"Service\",\n                            \"Request\"\n                        ]\n                    },\n                    \"message\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"id\",\n                    \"severity\",\n                    \"category\",\n                    \"message\"\n                ]\n            },\n            \"Messages\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"messages\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Message\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"extensions\": {\n        \"x-weave-extensions\": [\n            {\n                \"group\": \"COMPONENT_FACTORY\",\n                \"baseType\": \"io.aftersound.weave.component.ComponentFactory\",\n                \"types\": [\n                    \"io.aftersound.weave.kafka1x.ConsumerFactory\",\n                    \"io.aftersound.weave.kafka1x.ProducerFactory\",\n                    \"io.aftersound.weave.mvel2.TemplateEvaluatorFactory\",\n                    \"io.aftersound.weave.process.ProcessorFactoryRegistryFactory\"\n                ]\n            },\n            {\n                \"group\": \"VALUE_FUNC_FACTORY\",\n                \"baseType\": \"io.aftersound.weave.common.ValueFuncFactory\",\n                \"types\": [\n                    \"io.aftersound.weave.jackson.BsonValueFuncFactory\",\n                    \"io.aftersound.weave.jackson.JacksonValueFuncFactory\",\n                    \"io.aftersound.weave.jackson.SmileValueFuncFactory\",\n                    \"io.aftersound.weave.kafka1x.KafkaValueFuncFactory\",\n                    \"io.aftersound.weave.service.request.ParamValueFuncFactory\",\n                    \"io.aftersound.weave.slf4j.Slf4jValueFuncFactory\",\n                    \"io.aftersound.weave.value.CommonValueFuncFactory\"\n                ]\n            },\n            {\n                \"group\": \"ADMIN_SERVICE_EXECUTOR\",\n                \"baseType\": \"io.aftersound.weave.service.ServiceExecutor\",\n                \"types\": []\n            },\n            {\n                \"group\": \"SERVICE_EXECUTOR\",\n                \"baseType\": \"io.aftersound.weave.service.ServiceExecutor\",\n                \"types\": [\n                    \"io.aftersound.weave.process.ProcessServiceExecutor\"\n                ]\n            }\n        ],\n        \"x-weave-components\": [\n            {\n                \"type\": \"ProcessorFactoryRegistry\",\n                \"id\": \"processor.factory.registry\",\n                \"extensionTypes\": [\n                    \"io.aftersound.weave.process.FlatMapperFactory\",\n                    \"io.aftersound.weave.process.FunctionFactory\",\n                    \"io.aftersound.weave.kafka1x.AssignFactory\",\n                    \"io.aftersound.weave.kafka1x.SourceFactory\",\n                    \"io.aftersound.weave.kafka1x.SinkFactory\"\n                ]\n            },\n            {\n                \"type\": \"TemplateEvaluator\",\n                \"id\": \"TemplateEvaluator\",\n                \"options\": {}\n            },\n            {\n                \"type\": \"Kafka1X:Consumer\",\n                \"id\": \"kafka1x.consumer\",\n                \"options\": {\n                    \"bootstrap.servers\": \"192.168.1.80:9092\",\n                    \"group.id\": \"user.consumer\",\n                    \"topic.partitions\": \"user#0-2\",\n                    \"auto.offset.reset\": \"earliest\",\n                    \"isolation.level\": \"read_committed\"\n                }\n            },\n            {\n                \"type\": \"Kafka1X:Producer\",\n                \"id\": \"kafka1x.producer\",\n                \"options\": {\n                    \"bootstrap.servers\": \"192.168.1.80:9092\"\n                }\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/service/demo/application/kafka0/openapi-spec",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"demo",
						"application",
						"kafka0",
						"openapi-spec"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE OpenAPI Spec",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/service/demo/application/kafka0/openapi-spec",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"service",
						"demo",
						"application",
						"kafka0",
						"openapi-spec"
					]
				}
			},
			"response": []
		}
	]
}